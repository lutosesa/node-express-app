<%- include("template/header", {webtitle: 'Service'})  %>

<div class="container my-4 text-success">
    
    <h1><%= title %> <span style="font-size: 12px;">(title)</span></h1>

    <p style="font-size: 12px;"><%= description %> (description)</p>
    <hr > 

    <p>Express.js, ofta kallat bara "Express," är en populär och minimalistisk webbapplikationsramverk för Node.js. Det är utformat för att förenkla processen att bygga webbapplikationer och API:er med Node.js genom att tillhandahålla ett enkelt och kraftfullt sätt att hantera webbrutter, hantera begäranden och svara med svar.</p>

    <p>Här är några viktiga egenskaper och fördelar med Express.js:</p>

    <ol>
        <li><b>Enkelt och minimalistiskt: </b> Express är känt för sin enkelhet och lätthet att komma igång med. Det erbjuder en grundläggande struktur för att bygga webbapplikationer, men du har frihet att utöka den med tredjepartsmoduler efter behov.</li>

        <li><b>Routning: </b> Express möjliggör enkel hantering av rutter (routes) och URL-mönster. Du kan definiera hur din applikation ska svara på olika URL-begäranden, och Express dirigerar begäranden till de rätta rutterna.</li>

        <li><b>Middleware: </b> Middleware i Express är ett kraftfullt koncept som låter dig utföra åtgärder före eller efter att en begäran når din hanterare. Det gör det enkelt att implementera funktioner som autentisering, loggning, hantering av begärande/kroppsinnehåll och mycket mer.</li>

        <li><b>Tillgång till Node.js-ekosystemet: </b> Express är kompatibelt med Node.js och kan enkelt integreras med andra Node.js-moduler och paket. Dessutom har det ett brett ekosystem av tredjepartsmoduler tillgängliga via npm, vilket kan användas för att lägga till funktionalitet i din Express-applikation.</li>

         <li><b>Prestanda: </b> Express är känt för sin höga prestanda eftersom det bygger på Node.js och dra nytta av dess icke-blockerande, händelsedrivna natur.</li>
    </ol> 

    <p>Express används ofta för att bygga webbplatser och API:er, särskilt när utvecklare behöver snabbt skapa robusta och skalbara webbapplikationer. Dess enkelhet och flexibilitet gör det till ett populärt val för webbutvecklare som använder Node.js-plattformen.</p>

    <h3>Ett enkelt exempel på Express.js</h3>

    <p>Här nedan är ett enkelt exempel på hur du kan använda Express.js för att skapa en grundläggande webbserver och definiera några rutter:</p>

    <p>Först måste du se till att du har Express.js installerat. Du kan göra det med kommandot '<b>npm install express</b>'.</p>

    <p class="clearfix">
        <img src="img/express.png" 
        class="img-fluid rounded float-start mt-3" 
        width="550rem"
        alt="">
    </p>

    <p>I det här exemplet:</p>

    <ol>
        <li>Vi importerar Express.js och skapar en Express-app med <b>express()</b>.</li>

        <li>Vi konfigurerar en enkel middleware med '<b>app.use(express.json())</b>' för att analysera inkommande JSON-data i förfrågningar.</li>

        <li>Vi definierar två rutter:</li>

            <ul>
                <li>En GET-rutt för rotvägen ("/") som skickar tillbaka en hälsning när webbläsaren besöker webbplatsen.</li>

                <li>En POST-rutt för sökvägen "/data" som tar emot JSON-data från inkommande förfrågningar och skickar det tillbaka som JSON-svar.</li>
            </ul> 

         <li>Vi startar servern och låter den lyssna på port 3000. När servern är aktiv, skriver den ut ett meddelande i konsolen.</li>
    </ol> 

    <p>När du kör denna kod och går till '<b>http://localhost:3000</b>' i din webbläsare, kommer du att se hälsningsmeddelandet. Du kan också använda verktyg som Postman eller curl för att göra en POST-förfrågan till '<b>http://localhost:3000/data</b>' och skicka JSON-data till servern.</p>

    <p>Detta är bara ett mycket grundläggande exempel på hur Express.js kan användas. Express.js är ett kraftfullt webbserverramverk som kan användas för att bygga mer komplexa webbapplikationer med routing, middleware, databashantering och mycket mer.</p>

    
</div>

<%- include("template/footer")  %>